sudo: false
language: node_js

services:
  - docker

addons:
  hosts:
    - mariadb.example.com

before_script:
  # Disable services enabled by default
  - sudo /etc/init.d/mysql stop

install:
  # generate SSL certificates
  - mkdir tmp
  - chmod +x .travis/gen-ssl.sh
  - chmod +x .travis/build/build.sh
  - chmod +x .travis/build/docker-entrypoint.sh
  - chmod 777 .travis/build/
  - .travis/gen-ssl.sh mariadb.example.com tmp
  - export PROJ_PATH=`pwd`
  - export SSLCERT=$PROJ_PATH/tmp
  - export TEST_SSL_CA_FILE=$SSLCERT/server.crt
  - export TEST_SSL_CLIENT_KEY_FILE=$SSLCERT/client.key
  - export TEST_SSL_CLIENT_CERT_FILE=$SSLCERT/client.crt
  - export TEST_SSL_CLIENT_KEYSTORE_FILE=$SSLCERT/client-keystore.p12
  - export ENTRYPOINT=$PROJ_PATH/.travis/entrypoint

env:
  global:
  - TEST_PORT=3305
  - TEST_HOST=mariadb.example.com
  - MUST_USE_TCPIP=1

matrix:
  allow_failures:
    - node_js: "node"
      env: DB=build
  include:
    - node_js: "node"
      env: DB=build
    - node_js: "8"
      env: DB=mariadb:10.2
    - node_js: "node"
      env: DB=mariadb:10.2
    - node_js: "node"
      env: DB=mariadb:10.2 TEST_LONG=1
    - node_js: "node"
      env: DB=mariadb:10.2 LINT=1
    - node_js: "node"
      env: DB=mariadb:10.2 BENCH=1
    - node_js: "node"
      env: DB=mariadb:10.2 BENCH=1 TEST_ZIP=1
    - node_js: "node"
      env: DB=mariadb:5.5
    - node_js: "node"
      env: DB=mariadb:10.0
    - node_js: "node"
      env: DB=mariadb:10.1
    - node_js: "node"
      env: DB=mariadb:10.3
    - node_js: "node"
      env: DB=mysql:5.5
    - node_js: "node"
      env: DB=mysql:5.6
    - node_js: "node"
      env: DB=mysql:5.7
    - node_js: "node"
      env: DB=mysql:8.0

cache:
  directories:
  - node_modules

notifications:
  email: false

script:
  - if [ "$DB" = "build" ] ; then .travis/build/build.sh; fi
  - if [ "$DB" = "build" ] ; then docker build -t build:latest --label build .travis/build/; fi
  - docker-compose -f .travis/docker-compose.yml up -d
  - npm install coveralls
  - npm install
  - if [ -z "$SKIP_LEAK" ] ; then npm install node-memwatch; fi
  - node .travis/wait-for-docker-up.js
  - docker-compose -f .travis/docker-compose.yml exec -u root db bash /pam/pam.sh
  - sleep 1
  - docker-compose -f .travis/docker-compose.yml stop db
  - sleep 1
  - docker-compose -f .travis/docker-compose.yml up -d
  - docker-compose -f .travis/docker-compose.yml logs db
  - node --version
  - node .travis/wait-for-docker-up.js
  - if [ -n "$LINT" ] ; then npm run test:lint; fi
  - if [ -z "$BENCH$LINT" ] ; then npm run test:base; fi
  - if [ -n "$BENCH" ] ; then npm install promise-mysql mysql2; fi
  - if [ -n "$BENCH" ] ; then npm install microtime; fi
  - if [ -n "$BENCH" ] ; then npm run benchmark; fi
after_success:
  - npm i nyc -g
  - npm run coveralls